<?php
/**
 * ATUALIZA√á√ÉO AUTOM√ÅTICA DO BANCO DE DADOS
 * HELMER ACADEMY - HOSTINGER
 * 
 * Este script executa automaticamente todas as melhorias do banco
 * Executa apenas uma vez e se auto-destr√≥i ap√≥s conclus√£o
 */

// Incluir configura√ß√£o do banco
require 'config.php';

// Verificar se √© admin
session_start();
if (!isset($_SESSION['user']) || ($_SESSION['role'] ?? '') !== 'admin') {
    die('Acesso negado. Apenas administradores podem executar este script.');
}

// Verificar se j√° foi executado
$executed_file = 'database_updated.flag';
if (file_exists($executed_file)) {
    die('‚úÖ Banco de dados j√° foi atualizado anteriormente. Script n√£o executado por seguran√ßa.');
}

echo "<!DOCTYPE html>
<html lang='pt-BR'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Atualiza√ß√£o Autom√°tica - HELMER ACADEMY</title>
    <style>
        body { 
            font-family: 'Courier New', monospace; 
            background: linear-gradient(135deg, #000000 0%, #1a0000 25%, #2d0000 50%, #1a0000 75%, #000000 100%);
            color: #00ff00; 
            margin: 0; 
            padding: 20px; 
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: rgba(0,0,0,0.8); 
            padding: 30px; 
            border-radius: 15px; 
            border: 1px solid #dc2626;
            box-shadow: 0 0 30px rgba(220,38,38,0.3);
        }
        h1 { color: #dc2626; text-align: center; margin-bottom: 30px; }
        h2 { color: #ef4444; margin-top: 25px; margin-bottom: 15px; }
        .success { color: #00ff00; }
        .warning { color: #ffaa00; }
        .error { color: #ff4444; }
        .info { color: #00aaff; }
        .progress { 
            background: #1a1a1a; 
            border-radius: 10px; 
            padding: 15px; 
            margin: 10px 0; 
            border-left: 4px solid #dc2626;
        }
        .step { margin: 10px 0; padding: 10px; background: rgba(220,38,38,0.1); border-radius: 5px; }
    </style>
</head>
<body>
<div class='container'>";

echo "<h1>üöÄ ATUALIZA√á√ÉO AUTOM√ÅTICA DO BANCO DE DADOS</h1>";
echo "<div class='progress'>";
echo "<p class='info'>üîÑ Iniciando processo autom√°tico de atualiza√ß√£o...</p>";

try {
    $start_time = microtime(true);
    $updates_count = 0;
    $errors_count = 0;
    
    // 1. VERIFICA√á√ÉO INICIAL
    echo "<h2>üìä Verifica√ß√£o Inicial do Sistema</h2>";
    
    // Verificar conex√£o
    $pdo->query("SELECT 1");
    echo "<div class='step success'>‚úÖ Conex√£o com banco de dados estabelecida</div>";
    
    // Verificar tabelas existentes
    $existing_tables = [];
    $tables_to_check = ['users', 'produtos', 'cursos', 'comentarios'];
    foreach ($tables_to_check as $table) {
        try {
            $stmt = $pdo->query("DESCRIBE $table");
            $existing_tables[] = $table;
            echo "<div class='step success'>‚úÖ Tabela '$table' encontrada</div>";
        } catch (PDOException $e) {
            echo "<div class='step error'>‚ùå Tabela '$table' n√£o encontrada: " . $e->getMessage() . "</div>";
            $errors_count++;
        }
    }
    
    // 2. ATUALIZA√á√ÉO DA TABELA PRODUTOS
    echo "<h2>üõçÔ∏è Atualizando Tabela Produtos</h2>";
    
    $produtos_updates = [
        "status" => "ALTER TABLE produtos ADD COLUMN IF NOT EXISTS status ENUM('ativo', 'inativo') DEFAULT 'ativo' AFTER preco",
        "data_criacao" => "ALTER TABLE produtos ADD COLUMN IF NOT EXISTS data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP AFTER status",
        "data_atualizacao" => "ALTER TABLE produtos ADD COLUMN IF NOT EXISTS data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER data_criacao",
        "estoque" => "ALTER TABLE produtos ADD COLUMN IF NOT EXISTS estoque INT DEFAULT 0 AFTER preco",
        "categoria_id" => "ALTER TABLE produtos ADD COLUMN IF NOT EXISTS categoria_id INT AFTER estoque"
    ];
    
    foreach ($produtos_updates as $column => $sql) {
        try {
            $pdo->exec($sql);
            echo "<div class='step success'>‚úÖ Coluna '$column' adicionada √† tabela produtos</div>";
            $updates_count++;
        } catch (PDOException $e) {
            echo "<div class='step warning'>‚ö†Ô∏è Coluna '$column' j√° existe ou erro: " . $e->getMessage() . "</div>";
        }
    }
    
    // 3. ATUALIZA√á√ÉO DA TABELA USERS
    echo "<h2>üë• Atualizando Tabela Users</h2>";
    
    $users_updates = [
        "avatar" => "ALTER TABLE users ADD COLUMN IF NOT EXISTS avatar VARCHAR(255) DEFAULT NULL AFTER role",
        "ultimo_acesso" => "ALTER TABLE users ADD COLUMN IF NOT EXISTS ultimo_acesso TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER avatar",
        "status" => "ALTER TABLE users ADD COLUMN IF NOT EXISTS status ENUM('ativo', 'inativo', 'suspenso') DEFAULT 'ativo' AFTER ultimo_acesso"
    ];
    
    foreach ($users_updates as $column => $sql) {
        try {
            $pdo->exec($sql);
            echo "<div class='step success'>‚úÖ Coluna '$column' adicionada √† tabela users</div>";
            $updates_count++;
        } catch (PDOException $e) {
            echo "<div class='step warning'>‚ö†Ô∏è Coluna '$column' j√° existe ou erro: " . $e->getMessage() . "</div>";
        }
    }
    
    // 4. CRIA√á√ÉO DE NOVAS TABELAS
    echo "<h2>üÜï Criando Novas Tabelas</h2>";
    
    // Tabela categorias
    $categorias_sql = "
    CREATE TABLE IF NOT EXISTS categorias (
        id INT AUTO_INCREMENT PRIMARY KEY,
        nome VARCHAR(100) NOT NULL,
        descricao TEXT,
        imagem VARCHAR(255),
        status ENUM('ativo', 'inativo') DEFAULT 'ativo',
        data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )";
    
    try {
        $pdo->exec($categorias_sql);
        echo "<div class='step success'>‚úÖ Tabela 'categorias' criada/verificada</div>";
        $updates_count++;
    } catch (PDOException $e) {
        echo "<div class='step error'>‚ùå Erro ao criar tabela categorias: " . $e->getMessage() . "</div>";
        $errors_count++;
    }
    
    // Tabela banners
    $banners_sql = "
    CREATE TABLE IF NOT EXISTS banners (
        id INT AUTO_INCREMENT PRIMARY KEY,
        titulo VARCHAR(200) NOT NULL,
        descricao TEXT,
        imagem VARCHAR(255) NOT NULL,
        link VARCHAR(500),
        posicao ENUM('principal', 'secundario', 'lateral') DEFAULT 'principal',
        status ENUM('ativo', 'inativo') DEFAULT 'ativo',
        ordem INT DEFAULT 0,
        data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )";
    
    try {
        $pdo->exec($banners_sql);
        echo "<div class='step success'>‚úÖ Tabela 'banners' criada/verificada</div>";
        $updates_count++;
    } catch (PDOException $e) {
        echo "<div class='step error'>‚ùå Erro ao criar tabela banners: " . $e->getMessage() . "</div>";
        $errors_count++;
    }
    
    // Tabela notifica√ß√µes
    $notificacoes_sql = "
    CREATE TABLE IF NOT EXISTS notificacoes (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        titulo VARCHAR(200) NOT NULL,
        mensagem TEXT NOT NULL,
        tipo ENUM('info', 'sucesso', 'aviso', 'erro') DEFAULT 'info',
        lida BOOLEAN DEFAULT FALSE,
        data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    )";
    
    try {
        $pdo->exec($notificacoes_sql);
        echo "<div class='step success'>‚úÖ Tabela 'notificacoes' criada/verificada</div>";
        $updates_count++;
    } catch (PDOException $e) {
        echo "<div class='step error'>‚ùå Erro ao criar tabela notificacoes: " . $e->getMessage() . "</div>";
        $errors_count++;
    }
    
    // Tabela favoritos
    $favoritos_sql = "
    CREATE TABLE IF NOT EXISTS favoritos (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        produto_id INT,
        curso_id INT,
        tipo ENUM('produto', 'curso') NOT NULL,
        data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (produto_id) REFERENCES produtos(id) ON DELETE CASCADE,
        FOREIGN KEY (curso_id) REFERENCES cursos(id) ON DELETE CASCADE,
        UNIQUE KEY unique_favorito (user_id, produto_id, curso_id, tipo)
    )";
    
    try {
        $pdo->exec($favoritos_sql);
        echo "<div class='step success'>‚úÖ Tabela 'favoritos' criada/verificada</div>";
        $updates_count++;
    } catch (PDOException $e) {
        echo "<div class='step error'>‚ùå Erro ao criar tabela favoritos: " . $e->getMessage() . "</div>";
        $errors_count++;
    }
    
    // 5. ADI√á√ÉO DE √çNDICES PARA PERFORMANCE
    echo "<h2>‚ö° Adicionando √çndices para Performance</h2>";
    
    $indexes = [
        "idx_produtos_status" => "CREATE INDEX IF NOT EXISTS idx_produtos_status ON produtos(status)",
        "idx_produtos_categoria" => "CREATE INDEX IF NOT EXISTS idx_produtos_categoria ON produtos(categoria_id)",
        "idx_produtos_data_criacao" => "CREATE INDEX IF NOT EXISTS idx_produtos_data_criacao ON produtos(data_criacao)",
        "idx_users_status" => "CREATE INDEX IF NOT EXISTS idx_users_status ON users(status)",
        "idx_users_ultimo_acesso" => "CREATE INDEX IF NOT EXISTS idx_users_ultimo_acesso ON users(ultimo_acesso)",
        "idx_comentarios_conteudo" => "CREATE INDEX IF NOT EXISTS idx_comentarios_conteudo ON comentarios(conteudo_id, tipo_conteudo)",
        "idx_comentarios_data" => "CREATE INDEX IF NOT EXISTS idx_comentarios_data ON comentarios(data_publicacao)"
    ];
    
    foreach ($indexes as $index_name => $sql) {
        try {
            $pdo->exec($sql);
            echo "<div class='step success'>‚úÖ √çndice '$index_name' criado</div>";
            $updates_count++;
        } catch (PDOException $e) {
            echo "<div class='step warning'>‚ö†Ô∏è √çndice '$index_name' j√° existe ou erro: " . $e->getMessage() . "</div>";
        }
    }
    
    // 6. INSER√á√ÉO DE DADOS INICIAIS
    echo "<h2>üå± Inserindo Dados Iniciais</h2>";
    
    $categorias_iniciais = [
        ['Cursos', 'Cursos online da Helmer Academy', 'ativo'],
        ['Produtos Digitais', 'Produtos digitais exclusivos', 'ativo'],
        ['Ferramentas', 'Ferramentas e softwares', 'ativo'],
        ['Templates', 'Templates e modelos', 'ativo']
    ];
    
    foreach ($categorias_iniciais as $categoria) {
        try {
            $stmt = $pdo->prepare("INSERT IGNORE INTO categorias (nome, descricao, status) VALUES (?, ?, ?)");
            $stmt->execute($categoria);
            echo "<div class='step success'>‚úÖ Categoria inserida: " . $categoria[0] . "</div>";
            $updates_count++;
        } catch (PDOException $e) {
            echo "<div class='step warning'>‚ö†Ô∏è Categoria j√° existe ou erro: " . $e->getMessage() . "</div>";
        }
    }
    
    // 7. VERIFICA√á√ÉO FINAL
    echo "<h2>üîç Verifica√ß√£o Final do Sistema</h2>";
    
    $tables_final = ['users', 'produtos', 'cursos', 'comentarios', 'categorias', 'banners', 'notificacoes', 'favoritos'];
    $total_records = 0;
    
    foreach ($tables_final as $table) {
        try {
            $stmt = $pdo->query("SELECT COUNT(*) as count FROM $table");
            $count = $stmt->fetch()['count'];
            $total_records += $count;
            echo "<div class='step success'>‚úÖ Tabela '$table': $count registros</div>";
        } catch (PDOException $e) {
            echo "<div class='step error'>‚ùå Erro ao verificar '$table': " . $e->getMessage() . "</div>";
            $errors_count++;
        }
    }
    
    // 8. ESTAT√çSTICAS FINAIS
    $end_time = microtime(true);
    $execution_time = round($end_time - $start_time, 2);
    
    echo "<h2>üìä Estat√≠sticas da Atualiza√ß√£o</h2>";
    echo "<div class='step info'>‚è±Ô∏è Tempo de execu√ß√£o: {$execution_time} segundos</div>";
    echo "<div class='step success'>‚úÖ Opera√ß√µes realizadas: $updates_count</div>";
    echo "<div class='step warning'>‚ö†Ô∏è Avisos/Erros: $errors_count</div>";
    echo "<div class='step info'>üìä Total de registros no banco: $total_records</div>";
    
    // 9. MARCAR COMO EXECUTADO E AUTO-DESTRUIR
    file_put_contents($executed_file, date('Y-m-d H:i:s'));
    
    echo "<h2>üéâ Atualiza√ß√£o Conclu√≠da com Sucesso!</h2>";
    echo "<div class='step success'>‚úÖ Banco de dados atualizado automaticamente</div>";
    echo "<div class='step success'>‚úÖ Novas tabelas criadas</div>";
    echo "<div class='step success'>‚úÖ √çndices adicionados</div>";
    echo "<div class='step success'>‚úÖ Dados iniciais inseridos</div>";
    echo "<div class='step success'>‚úÖ Script marcado como executado</div>";
    
    echo "<h2>üîÑ Auto-Destrui√ß√£o do Script</h2>";
    echo "<div class='step warning'>‚ö†Ô∏è Este script ser√° removido automaticamente em 10 segundos...</div>";
    
    // Auto-destruir o script ap√≥s 10 segundos
    echo "<script>
        setTimeout(function() {
            // Tentar remover o arquivo
            fetch('?action=delete_script', {method: 'POST'})
            .then(() => {
                document.body.innerHTML = '<div style=\"text-align: center; padding: 50px; color: #00ff00;\"><h1>‚úÖ Script Removido com Sucesso!</h1><p>Atualiza√ß√£o conclu√≠da. Voc√™ pode fechar esta p√°gina.</p></div>';
            })
            .catch(() => {
                document.body.innerHTML = '<div style=\"text-align: center; padding: 50px; color: #ffaa00;\"><h1>‚ö†Ô∏è Atualiza√ß√£o Conclu√≠da!</h1><p>Por favor, delete manualmente o arquivo auto_update_database.php</p></div>';
            });
        }, 10000);
    </script>";
    
} catch (Exception $e) {
    echo "<h2>‚ùå Erro Durante a Atualiza√ß√£o</h2>";
    echo "<div class='step error'>Erro: " . $e->getMessage() . "</div>";
    echo "<div class='step warning'>‚ö†Ô∏è Verifique as configura√ß√µes do banco de dados</div>";
}

// Processar auto-destrui√ß√£o se solicitado
if (isset($_GET['action']) && $_GET['action'] === 'delete_script') {
    unlink(__FILE__);
    exit('Script removido com sucesso');
}

echo "</div></div></body></html>";
?>
